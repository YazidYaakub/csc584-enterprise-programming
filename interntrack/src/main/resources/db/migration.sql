CREATE SEQUENCE ACTIVITY_SEQUENCE;
CREATE SEQUENCE GRADE_SEQUENCE;
CREATE SEQUENCE COMMENT_SEQUENCE;
CREATE SEQUENCE USER_SEQUENCE;
CREATE SEQUENCE COMPANY_SEQUENCE;
CREATE SEQUENCE UNI_SEQUENCE;

CREATE TABLE COMPANIES
(
    COMPANY_ID      NUMBER       NOT NULL
        CONSTRAINT COMPANIES_PK
            PRIMARY KEY,
    NAME            VARCHAR2(64) NOT NULL,
    NATURE_BUSINESS VARCHAR2(32),
    LOCATION        VARCHAR2(64)
);

CREATE OR REPLACE TRIGGER BEFORE_INSERT_COMPANY
    BEFORE INSERT
    ON COMPANIES
    FOR each ROW
BEGIN
    IF :new.COMPANY_ID IS NULL THEN
        SELECT INTERNTRACK.COMPANY_SEQUENCE.NEXTVAL INTO :new.COMPANY_ID FROM dual;
    END IF;
END;

CREATE TABLE UNIVERSITIES
(
    UNIVERSITY_ID NUMBER       NOT NULL
        CONSTRAINT UNIVERSITIES_PK
            PRIMARY KEY,
    NAME          VARCHAR2(64) NOT NULL
        CONSTRAINT UNIQUE_NAME
            unique,
    LOCATION      VARCHAR2(64)
);

CREATE TABLE USERS
(
    USER_ID       NUMBER       NOT NULL PRIMARY KEY,
    EMAIL         VARCHAR2(50) NOT NULL,
    PASSWORD      VARCHAR2(50) NOT NULL,
    ROLE          VARCHAR2(20),
    CREATED_AT    TIMESTAMP(6) default CURRENT_TIMESTAMP,
    UPDATED_AT    TIMESTAMP(6) default CURRENT_TIMESTAMP,
    NAME          VARCHAR2(32),
    COMPANY_ID    NUMBER
        CONSTRAINT USERS_COMPANIES_COMPANY_ID_FK
            REFERENCES COMPANIES,
    UNIVERSITY_ID NUMBER
        CONSTRAINT UNIVERSITY_FK
            REFERENCES UNIVERSITIES
);

CREATE unique index SYS_C007128
    ON USERS (EMAIL);

CREATE OR REPLACE TRIGGER BEFORE_INSERT_USER
    BEFORE INSERT
    ON USERS
    FOR each ROW
BEGIN
    IF :new.USER_ID IS NULL THEN
        SELECT INTERNTRACK.USER_SEQUENCE.NEXTVAL INTO :new.USER_ID FROM dual;
    END IF;
END;

CREATE TABLE GRADES
(
    GRADES_ID  NUMBER      NOT NULL
        PRIMARY KEY,
    STUDENT_ID NUMBER      NOT NULL
        REFERENCES INTERNTRACK.USERS,
    MONTH      VARCHAR2(8) NOT NULL
        CHECK (MONTH IN
               ('JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL',
                'AUG', 'SEP', 'OCT', 'NOV', 'DEC')),
    GRADE      CHAR
        CHECK (GRADE IN ('A', 'B', 'C', 'D', 'E')),
    CREATED_AT TIMESTAMP(6) default CURRENT_TIMESTAMP
);

CREATE OR REPLACE TRIGGER BEFORE_INSERT_GRADES
    BEFORE INSERT
    ON GRADES
    FOR each ROW
BEGIN
    IF :new.GRADES_ID IS NULL THEN
        SELECT INTERNTRACK.GRADE_SEQUENCE.NEXTVAL INTO :new.GRADES_ID FROM dual;
    END IF;
END;

CREATE TABLE ACTIVITIES
(
    ACTIVITY_ID    NUMBER                                 NOT NULL
        PRIMARY KEY,
    STUDENT_ID     NUMBER                                 NOT NULL
        REFERENCES INTERNTRACK.USERS,
    ACTIVITY_NAME  VARCHAR2(64)                           NOT NULL,
    ACTIVITY_DATE  TIMESTAMP(6) default CURRENT_TIMESTAMP NOT NULL,
    IS_APPROVED    NUMBER       DEFAULT 0                 NOT NULL CHECK (IS_APPROVED IN (1, 0)),
    APPROVED_BY_ID NUMBER                                 NOT NULL
        REFERENCES INTERNTRACK.USERS,
    APPROVED_AT    TIMESTAMP(6)
);

CREATE OR REPLACE TRIGGER BEFORE_INSERT_ACTIVITIES
    BEFORE INSERT
    ON ACTIVITIES
    FOR each ROW
BEGIN
    IF :new.ACTIVITY_ID IS NULL THEN
        SELECT INTERNTRACK.ACTIVITY_SEQUENCE.NEXTVAL INTO :new.ACTIVITY_ID FROM dual;
    END IF;
END;

CREATE TABLE COMMENTS
(
    COMMENT_ID   NUMBER                                 NOT NULL
        PRIMARY KEY,
    ACTIVITY_ID  NUMBER                                 NOT NULL
        REFERENCES ACTIVITIES,
    "COMMENT"    VARCHAR2(255)                          NOT NULL,
    CREATED_AT   TIMESTAMP(6) default CURRENT_TIMESTAMP NOT NULL,
    USER_ID      NUMBER                                 NOT NULL
        REFERENCES INTERNTRACK.USERS,
    ACKNOWLEDGED NUMBER       default 0                 NOT NULL
        CHECK (ACKNOWLEDGED IN (1, 0))
);

CREATE OR REPLACE TRIGGER BEFORE_INSERT_COMMENTS
    BEFORE INSERT
    ON COMMENTS
    FOR each ROW
BEGIN
    IF :new.COMMENT_ID IS NULL THEN
        SELECT INTERNTRACK.COMMENT_SEQUENCE.NEXTVAL INTO :new.COMMENT_ID FROM dual;
    END IF;
END;

CREATE TABLE STUDENT_CONSULTANTS
(
    STUDENT_ID    NUMBER                                 NOT NULL
        REFERENCES INTERNTRACK.USERS,
    ADVISOR_ID    NUMBER                                 NOT NULL
        REFERENCES INTERNTRACK.USERS,
    SUPERVISOR_ID NUMBER                                 NOT NULL
        REFERENCES INTERNTRACK.USERS,
    ASSIGNED_AT   TIMESTAMP(6) default CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT STUDENT_CONSULTANTS_PK
        PRIMARY KEY (STUDENT_ID, ADVISOR_ID, SUPERVISOR_ID)
);

CREATE OR REPLACE TRIGGER BEFORE_INSERT_UNIVERSITY
    BEFORE INSERT
    ON UNIVERSITIES
    FOR each ROW
BEGIN
    IF :new.UNIVERSITY_ID IS NULL THEN
        SELECT INTERNTRACK.UNI_SEQUENCE.NEXTVAL INTO :new.UNIVERSITY_ID FROM dual;
    END IF;
END;

